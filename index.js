const {Telegraf, fmt} = require('telegraf');
require('dotenv').config();
const bot = new Telegraf(process.env.BOT_TOKEN);
const replaceDisallowedWords = require('disallowed-word-filter')
const myFilter = new replaceDisallowedWords({
  additionalWords: '—Å—É–∫–∞',
})
const { MongoClient } = require('mongodb');
const url = 'mongodb+srv://Muhammad007:Muhammad007@database.3dodl7a.mongodb.net';
const client = new MongoClient(url);
client.connect();
const db = client.db('bot');
const collection = db.collection('users');
bot.start((ctx) => ctx.reply('–¢–æ–∫—Å–∏–∫ —Å—Ä–∞–∑—É –≥–æ–≤–æ—Ä—é!'));
bot.help((ctx) => ctx.reply('/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞'));
bot.launch({dropPendingUpdates: true});


bot.command('balance', async ctx => {
    try {
        let res = await collection.findOne({user_name: ctx.message.text.split(' ')[1]});
        if(ctx.message.text.split(' ')[1] == undefined) {
            await ctx.replyWithHTML('–í—ã –Ω–µ –≤–≤–µ–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º —É—á–∞—Å—Ç–Ω–∏–∫–∞...\n<i>/balance @username</i>')
        }else if(res == null) {
            await ctx.replyWithHTML(`–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ —é–∑–µ—Ä–Ω–µ–π–º–æ–º <i>${ctx.message.text.split(' ')[1]}</i> –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...`)
        }else {
            await ctx.reply(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.message.text.split(' ')[1]} = ${res.balance} —Ç—ã—Å —Å—É–º`)
        }
    }catch(e) {
        console.error(e);
    }
    
})

bot.on("message", async (ctx) => {
    try {
        let filter = await myFilter.check(ctx.message.text, true)
        if(filter == true){
            let res = await collection.findOne({user_id: ctx.message.from.id});
            let sum = res.balance + 5
            await collection.updateOne({user_id: ctx.message.from.id}, {$set: {balance: sum}})
            await ctx.tg.deleteMessage(ctx.chat.id, ctx.message.message_id);
            let tomsg = await ctx.reply(`ü§¨ @${ctx.message.from.username}, –Ω–µ –º–∞—Ç–µ—Ä–∏—Å—å –ø–æ –±—Ä–∞—Ç—Å–∫–∏–π...\n------------------------------\n–ù–∞–ª–æ–≥–∏ –∑–∞ –º–∞—Ç—ã: +5—Ç—ã—Å —Å—É–º\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ —Ç–µ–ø–µ—Ä—å: ${sum}—Ç—ã—Å —Å—É–º\n–í –æ–±—â–µ–º –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –æ—Ç–¥–∞—Ç—å –Ω–∞–¥–∑–∏—Ä–∞—Ç–µ–ª—é: ${sum}—Ç—ã—Å —Å—É–º\n------------------------------\n–¢–∞–º –±—ã–ª —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:`);
            await ctx.reply(`||${ctx.message.text}||`, { parse_mode: 'MarkdownV2', reply_to_message_id: tomsg.message_id})
        }else {
            let result = await collection.findOne({user_id: ctx.message.from.id});
            if(result == null) {
                await collection.insertOne({
                    first_name: ctx.message.from.first_name || 'anonim',
                    last_name: ctx.message.from.last_name || 'anonim',
                    user_name: `@${ctx.message.from.username}` || 'anonim',
                    user_id: ctx.message.from.id,
                    balance: 0
                })
            }else {
                return
            }
        }
    }catch(e) {
        console.error(e);
    } 
})  

bot.on("edited_message", async (ctx) => {
    try {
        let filter = await myFilter.check(ctx.editedMessage.text, true)
        if(filter == true) {
            let res = await collection.findOne({user_id: ctx.message.from.id});
            let sum = await res.balance + 5
            await collection.updateOne({user_id: ctx.message.from.id}, {$set: {balance: sum}})
            await ctx.tg.deleteMessage(ctx.editedMessage.chat.id, ctx.editedMessage.message_id);
            let tomsg = await ctx.reply(`ü§¨ @${ctx.editedMessage.from.username}, –Ω–µ –º–∞—Ç–µ—Ä–∏—Å—å –ø–æ –±—Ä–∞—Ç—Å–∫–∏–π...\n------------------------------\n–ù–∞–ª–æ–≥–∏ –∑–∞ –º–∞—Ç—ã: +5—Ç—ã—Å —Å—É–º\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ —Ç–µ–ø–µ—Ä—å: ${sum}—Ç—ã—Å —Å—É–º\n–í –æ–±—â–µ–º –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –æ—Ç–¥–∞—Ç—å –Ω–∞–¥–∑–∏—Ä–∞—Ç–µ–ª—é: ${sum}—Ç—ã—Å —Å—É–º\n------------------------------\n–¢–∞–º –±—ã–ª —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:`);
            await ctx.reply(`||${ctx.editedMessage.text}||`, { parse_mode: 'MarkdownV2', reply_to_message_id: tomsg.message_id})
        }else {
            return
        }
    }catch(e) {
        console.error(e);
    }
})






process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));